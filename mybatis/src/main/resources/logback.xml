<?xml version="1.0" encoding="UTF-8"?>
<!--
      scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
　　  scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
　　  debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--
        用来定义变量值，它有两个属性name和value，通过<property>定义的值会被插入到logger上下文中，可以使“${}”来使用变量。
     -->
    <property name="appName" value="mybatis"/>

    <!--
        用来设置上下文名称，每个logger都关联到logger上下文，默认上下文名称为default。但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。
     -->
    <contextName>${appName}</contextName>

    <!--
        获取时间戳字符串，他有两个属性key和datePattern
        key: 标识此<timestamp> 的名字
        datePattern: 设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循java.txt.SimpleDateFormat的格式
    -->
    <timestamp key="bySecond" datePattern="yyyyMMdd'T'HHmmss"/>

    <!--
        控制台输出
        name指定appender名称，class指定appender的全限定名

     -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 对日志进行格式化 -->
        <encoder>
            <pattern>%thread|%d{yyyy-MM-dd HH:mm:ss}|%t|%p| %m |%logger:%L%n</pattern>
        </encoder>
    </appender>

    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${catalina.home}/logs/mybaitis.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- daily rollover -->
            <fileNamePattern>${catalina.home}/logs/mybatis-%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- keep 30 days' worth of history capped at 3GB total size -->
            <maxHistory>30</maxHistory>
            <totalSizeCap>30GB</totalSizeCap>
        </rollingPolicy>

        <encoder charset="UTF-8">
            <pattern>[%thread] %d{MM-dd HH:mm:ss} [%-5level] %class{0}:%line - %msg%n</pattern>
        </encoder>
    </appender>

    <appender name="ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="FILE"/>
    </appender>

    <!-- 日志的输出级别由低到高（越来问题越严重）trace->debug->info->warn->error -->

    <!-- root将级别为INFO及大于INFO的日志信息交给已经配置好的name='STDOUT'的appender处理，将信息打印到控制台-Console -->
    <root level="INFO">
        <!-- appender-ref标识这个appender将会添加到本应用的日志系统中 -->
        <appender-ref ref="STDOUT"/>
    </root>

    <logger name="com.husen" level="INFO" additivity="false">
        <appender-ref ref="STDOUT"/>
    </logger>

    <logger name="com.husen" level="INFO" additivity="false">
        <appender-ref ref="ASYNC"/>
    </logger>

    <logger name="org.springframework" level="INFO" additivity="false">
        <appender-ref ref="STDOUT"/>
    </logger>
</configuration>